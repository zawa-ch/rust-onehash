use crate::keccak::{KeccakWord, KeccakWord64};

#[test] fn get_bit0_high() { let b = KeccakWord64(0x0000000000000001); assert_eq!(b.get_bit(0), true) }
#[test] fn get_bit1_high() { let b = KeccakWord64(0x0000000000000002); assert_eq!(b.get_bit(1), true) }
#[test] fn get_bit2_high() { let b = KeccakWord64(0x0000000000000004); assert_eq!(b.get_bit(2), true) }
#[test] fn get_bit3_high() { let b = KeccakWord64(0x0000000000000008); assert_eq!(b.get_bit(3), true) }
#[test] fn get_bit4_high() { let b = KeccakWord64(0x0000000000000010); assert_eq!(b.get_bit(4), true) }
#[test] fn get_bit5_high() { let b = KeccakWord64(0x0000000000000020); assert_eq!(b.get_bit(5), true) }
#[test] fn get_bit6_high() { let b = KeccakWord64(0x0000000000000040); assert_eq!(b.get_bit(6), true) }
#[test] fn get_bit7_high() { let b = KeccakWord64(0x0000000000000080); assert_eq!(b.get_bit(7), true) }
#[test] fn get_bit8_high() { let b = KeccakWord64(0x0000000000000100); assert_eq!(b.get_bit(8), true) }
#[test] fn get_bit9_high() { let b = KeccakWord64(0x0000000000000200); assert_eq!(b.get_bit(9), true) }
#[test] fn get_bit10_high() { let b = KeccakWord64(0x0000000000000400); assert_eq!(b.get_bit(10), true) }
#[test] fn get_bit11_high() { let b = KeccakWord64(0x0000000000000800); assert_eq!(b.get_bit(11), true) }
#[test] fn get_bit12_high() { let b = KeccakWord64(0x0000000000001000); assert_eq!(b.get_bit(12), true) }
#[test] fn get_bit13_high() { let b = KeccakWord64(0x0000000000002000); assert_eq!(b.get_bit(13), true) }
#[test] fn get_bit14_high() { let b = KeccakWord64(0x0000000000004000); assert_eq!(b.get_bit(14), true) }
#[test] fn get_bit15_high() { let b = KeccakWord64(0x0000000000008000); assert_eq!(b.get_bit(15), true) }
#[test] fn get_bit16_high() { let b = KeccakWord64(0x0000000000010000); assert_eq!(b.get_bit(16), true) }
#[test] fn get_bit17_high() { let b = KeccakWord64(0x0000000000020000); assert_eq!(b.get_bit(17), true) }
#[test] fn get_bit18_high() { let b = KeccakWord64(0x0000000000040000); assert_eq!(b.get_bit(18), true) }
#[test] fn get_bit19_high() { let b = KeccakWord64(0x0000000000080000); assert_eq!(b.get_bit(19), true) }
#[test] fn get_bit20_high() { let b = KeccakWord64(0x0000000000100000); assert_eq!(b.get_bit(20), true) }
#[test] fn get_bit21_high() { let b = KeccakWord64(0x0000000000200000); assert_eq!(b.get_bit(21), true) }
#[test] fn get_bit22_high() { let b = KeccakWord64(0x0000000000400000); assert_eq!(b.get_bit(22), true) }
#[test] fn get_bit23_high() { let b = KeccakWord64(0x0000000000800000); assert_eq!(b.get_bit(23), true) }
#[test] fn get_bit24_high() { let b = KeccakWord64(0x0000000001000000); assert_eq!(b.get_bit(24), true) }
#[test] fn get_bit25_high() { let b = KeccakWord64(0x0000000002000000); assert_eq!(b.get_bit(25), true) }
#[test] fn get_bit26_high() { let b = KeccakWord64(0x0000000004000000); assert_eq!(b.get_bit(26), true) }
#[test] fn get_bit27_high() { let b = KeccakWord64(0x0000000008000000); assert_eq!(b.get_bit(27), true) }
#[test] fn get_bit28_high() { let b = KeccakWord64(0x0000000010000000); assert_eq!(b.get_bit(28), true) }
#[test] fn get_bit29_high() { let b = KeccakWord64(0x0000000020000000); assert_eq!(b.get_bit(29), true) }
#[test] fn get_bit30_high() { let b = KeccakWord64(0x0000000040000000); assert_eq!(b.get_bit(30), true) }
#[test] fn get_bit31_high() { let b = KeccakWord64(0x0000000080000000); assert_eq!(b.get_bit(31), true) }
#[test] fn get_bit32_high() { let b = KeccakWord64(0x0000000100000000); assert_eq!(b.get_bit(32), true) }
#[test] fn get_bit33_high() { let b = KeccakWord64(0x0000000200000000); assert_eq!(b.get_bit(33), true) }
#[test] fn get_bit34_high() { let b = KeccakWord64(0x0000000400000000); assert_eq!(b.get_bit(34), true) }
#[test] fn get_bit35_high() { let b = KeccakWord64(0x0000000800000000); assert_eq!(b.get_bit(35), true) }
#[test] fn get_bit36_high() { let b = KeccakWord64(0x0000001000000000); assert_eq!(b.get_bit(36), true) }
#[test] fn get_bit37_high() { let b = KeccakWord64(0x0000002000000000); assert_eq!(b.get_bit(37), true) }
#[test] fn get_bit38_high() { let b = KeccakWord64(0x0000004000000000); assert_eq!(b.get_bit(38), true) }
#[test] fn get_bit39_high() { let b = KeccakWord64(0x0000008000000000); assert_eq!(b.get_bit(39), true) }
#[test] fn get_bit40_high() { let b = KeccakWord64(0x0000010000000000); assert_eq!(b.get_bit(40), true) }
#[test] fn get_bit41_high() { let b = KeccakWord64(0x0000020000000000); assert_eq!(b.get_bit(41), true) }
#[test] fn get_bit42_high() { let b = KeccakWord64(0x0000040000000000); assert_eq!(b.get_bit(42), true) }
#[test] fn get_bit43_high() { let b = KeccakWord64(0x0000080000000000); assert_eq!(b.get_bit(43), true) }
#[test] fn get_bit44_high() { let b = KeccakWord64(0x0000100000000000); assert_eq!(b.get_bit(44), true) }
#[test] fn get_bit45_high() { let b = KeccakWord64(0x0000200000000000); assert_eq!(b.get_bit(45), true) }
#[test] fn get_bit46_high() { let b = KeccakWord64(0x0000400000000000); assert_eq!(b.get_bit(46), true) }
#[test] fn get_bit47_high() { let b = KeccakWord64(0x0000800000000000); assert_eq!(b.get_bit(47), true) }
#[test] fn get_bit48_high() { let b = KeccakWord64(0x0001000000000000); assert_eq!(b.get_bit(48), true) }
#[test] fn get_bit49_high() { let b = KeccakWord64(0x0002000000000000); assert_eq!(b.get_bit(49), true) }
#[test] fn get_bit50_high() { let b = KeccakWord64(0x0004000000000000); assert_eq!(b.get_bit(50), true) }
#[test] fn get_bit51_high() { let b = KeccakWord64(0x0008000000000000); assert_eq!(b.get_bit(51), true) }
#[test] fn get_bit52_high() { let b = KeccakWord64(0x0010000000000000); assert_eq!(b.get_bit(52), true) }
#[test] fn get_bit53_high() { let b = KeccakWord64(0x0020000000000000); assert_eq!(b.get_bit(53), true) }
#[test] fn get_bit54_high() { let b = KeccakWord64(0x0040000000000000); assert_eq!(b.get_bit(54), true) }
#[test] fn get_bit55_high() { let b = KeccakWord64(0x0080000000000000); assert_eq!(b.get_bit(55), true) }
#[test] fn get_bit56_high() { let b = KeccakWord64(0x0100000000000000); assert_eq!(b.get_bit(56), true) }
#[test] fn get_bit57_high() { let b = KeccakWord64(0x0200000000000000); assert_eq!(b.get_bit(57), true) }
#[test] fn get_bit58_high() { let b = KeccakWord64(0x0400000000000000); assert_eq!(b.get_bit(58), true) }
#[test] fn get_bit59_high() { let b = KeccakWord64(0x0800000000000000); assert_eq!(b.get_bit(59), true) }
#[test] fn get_bit60_high() { let b = KeccakWord64(0x1000000000000000); assert_eq!(b.get_bit(60), true) }
#[test] fn get_bit61_high() { let b = KeccakWord64(0x2000000000000000); assert_eq!(b.get_bit(61), true) }
#[test] fn get_bit62_high() { let b = KeccakWord64(0x4000000000000000); assert_eq!(b.get_bit(62), true) }
#[test] fn get_bit63_high() { let b = KeccakWord64(0x8000000000000000); assert_eq!(b.get_bit(63), true) }
#[test] fn get_bit0_low() { let b = KeccakWord64(0xFFFFFFFFFFFFFFFE); assert_eq!(b.get_bit(0), false) }
#[test] fn get_bit1_low() { let b = KeccakWord64(0xFFFFFFFFFFFFFFFD); assert_eq!(b.get_bit(1), false) }
#[test] fn get_bit2_low() { let b = KeccakWord64(0xFFFFFFFFFFFFFFFB); assert_eq!(b.get_bit(2), false) }
#[test] fn get_bit3_low() { let b = KeccakWord64(0xFFFFFFFFFFFFFFF7); assert_eq!(b.get_bit(3), false) }
#[test] fn get_bit4_low() { let b = KeccakWord64(0xFFFFFFFFFFFFFFEF); assert_eq!(b.get_bit(4), false) }
#[test] fn get_bit5_low() { let b = KeccakWord64(0xFFFFFFFFFFFFFFDF); assert_eq!(b.get_bit(5), false) }
#[test] fn get_bit6_low() { let b = KeccakWord64(0xFFFFFFFFFFFFFFBF); assert_eq!(b.get_bit(6), false) }
#[test] fn get_bit7_low() { let b = KeccakWord64(0xFFFFFFFFFFFFFF7F); assert_eq!(b.get_bit(7), false) }
#[test] fn get_bit8_low() { let b = KeccakWord64(0xFFFFFFFFFFFFFEFF); assert_eq!(b.get_bit(8), false) }
#[test] fn get_bit9_low() { let b = KeccakWord64(0xFFFFFFFFFFFFFDFF); assert_eq!(b.get_bit(9), false) }
#[test] fn get_bit10_low() { let b = KeccakWord64(0xFFFFFFFFFFFFFBFF); assert_eq!(b.get_bit(10), false) }
#[test] fn get_bit11_low() { let b = KeccakWord64(0xFFFFFFFFFFFFF7FF); assert_eq!(b.get_bit(11), false) }
#[test] fn get_bit12_low() { let b = KeccakWord64(0xFFFFFFFFFFFFEFFF); assert_eq!(b.get_bit(12), false) }
#[test] fn get_bit13_low() { let b = KeccakWord64(0xFFFFFFFFFFFFDFFF); assert_eq!(b.get_bit(13), false) }
#[test] fn get_bit14_low() { let b = KeccakWord64(0xFFFFFFFFFFFFBFFF); assert_eq!(b.get_bit(14), false) }
#[test] fn get_bit15_low() { let b = KeccakWord64(0xFFFFFFFFFFFF7FFF); assert_eq!(b.get_bit(15), false) }
#[test] fn get_bit16_low() { let b = KeccakWord64(0xFFFFFFFFFFFEFFFF); assert_eq!(b.get_bit(16), false) }
#[test] fn get_bit17_low() { let b = KeccakWord64(0xFFFFFFFFFFFDFFFF); assert_eq!(b.get_bit(17), false) }
#[test] fn get_bit18_low() { let b = KeccakWord64(0xFFFFFFFFFFFBFFFF); assert_eq!(b.get_bit(18), false) }
#[test] fn get_bit19_low() { let b = KeccakWord64(0xFFFFFFFFFFF7FFFF); assert_eq!(b.get_bit(19), false) }
#[test] fn get_bit20_low() { let b = KeccakWord64(0xFFFFFFFFFFEFFFFF); assert_eq!(b.get_bit(20), false) }
#[test] fn get_bit21_low() { let b = KeccakWord64(0xFFFFFFFFFFDFFFFF); assert_eq!(b.get_bit(21), false) }
#[test] fn get_bit22_low() { let b = KeccakWord64(0xFFFFFFFFFFBFFFFF); assert_eq!(b.get_bit(22), false) }
#[test] fn get_bit23_low() { let b = KeccakWord64(0xFFFFFFFFFF7FFFFF); assert_eq!(b.get_bit(23), false) }
#[test] fn get_bit24_low() { let b = KeccakWord64(0xFFFFFFFFFEFFFFFF); assert_eq!(b.get_bit(24), false) }
#[test] fn get_bit25_low() { let b = KeccakWord64(0xFFFFFFFFFDFFFFFF); assert_eq!(b.get_bit(25), false) }
#[test] fn get_bit26_low() { let b = KeccakWord64(0xFFFFFFFFFBFFFFFF); assert_eq!(b.get_bit(26), false) }
#[test] fn get_bit27_low() { let b = KeccakWord64(0xFFFFFFFFF7FFFFFF); assert_eq!(b.get_bit(27), false) }
#[test] fn get_bit28_low() { let b = KeccakWord64(0xFFFFFFFFEFFFFFFF); assert_eq!(b.get_bit(28), false) }
#[test] fn get_bit29_low() { let b = KeccakWord64(0xFFFFFFFFDFFFFFFF); assert_eq!(b.get_bit(29), false) }
#[test] fn get_bit30_low() { let b = KeccakWord64(0xFFFFFFFFBFFFFFFF); assert_eq!(b.get_bit(30), false) }
#[test] fn get_bit31_low() { let b = KeccakWord64(0xFFFFFFFF7FFFFFFF); assert_eq!(b.get_bit(31), false) }
#[test] fn get_bit32_low() { let b = KeccakWord64(0xFFFFFFFEFFFFFFFF); assert_eq!(b.get_bit(32), false) }
#[test] fn get_bit33_low() { let b = KeccakWord64(0xFFFFFFFDFFFFFFFF); assert_eq!(b.get_bit(33), false) }
#[test] fn get_bit34_low() { let b = KeccakWord64(0xFFFFFFFBFFFFFFFF); assert_eq!(b.get_bit(34), false) }
#[test] fn get_bit35_low() { let b = KeccakWord64(0xFFFFFFF7FFFFFFFF); assert_eq!(b.get_bit(35), false) }
#[test] fn get_bit36_low() { let b = KeccakWord64(0xFFFFFFEFFFFFFFFF); assert_eq!(b.get_bit(36), false) }
#[test] fn get_bit37_low() { let b = KeccakWord64(0xFFFFFFDFFFFFFFFF); assert_eq!(b.get_bit(37), false) }
#[test] fn get_bit38_low() { let b = KeccakWord64(0xFFFFFFBFFFFFFFFF); assert_eq!(b.get_bit(38), false) }
#[test] fn get_bit39_low() { let b = KeccakWord64(0xFFFFFF7FFFFFFFFF); assert_eq!(b.get_bit(39), false) }
#[test] fn get_bit40_low() { let b = KeccakWord64(0xFFFFFEFFFFFFFFFF); assert_eq!(b.get_bit(40), false) }
#[test] fn get_bit41_low() { let b = KeccakWord64(0xFFFFFDFFFFFFFFFF); assert_eq!(b.get_bit(41), false) }
#[test] fn get_bit42_low() { let b = KeccakWord64(0xFFFFFBFFFFFFFFFF); assert_eq!(b.get_bit(42), false) }
#[test] fn get_bit43_low() { let b = KeccakWord64(0xFFFFF7FFFFFFFFFF); assert_eq!(b.get_bit(43), false) }
#[test] fn get_bit44_low() { let b = KeccakWord64(0xFFFFEFFFFFFFFFFF); assert_eq!(b.get_bit(44), false) }
#[test] fn get_bit45_low() { let b = KeccakWord64(0xFFFFDFFFFFFFFFFF); assert_eq!(b.get_bit(45), false) }
#[test] fn get_bit46_low() { let b = KeccakWord64(0xFFFFBFFFFFFFFFFF); assert_eq!(b.get_bit(46), false) }
#[test] fn get_bit47_low() { let b = KeccakWord64(0xFFFF7FFFFFFFFFFF); assert_eq!(b.get_bit(47), false) }
#[test] fn get_bit48_low() { let b = KeccakWord64(0xFFFEFFFFFFFFFFFF); assert_eq!(b.get_bit(48), false) }
#[test] fn get_bit49_low() { let b = KeccakWord64(0xFFFDFFFFFFFFFFFF); assert_eq!(b.get_bit(49), false) }
#[test] fn get_bit50_low() { let b = KeccakWord64(0xFFFBFFFFFFFFFFFF); assert_eq!(b.get_bit(50), false) }
#[test] fn get_bit51_low() { let b = KeccakWord64(0xFFF7FFFFFFFFFFFF); assert_eq!(b.get_bit(51), false) }
#[test] fn get_bit52_low() { let b = KeccakWord64(0xFFEFFFFFFFFFFFFF); assert_eq!(b.get_bit(52), false) }
#[test] fn get_bit53_low() { let b = KeccakWord64(0xFFDFFFFFFFFFFFFF); assert_eq!(b.get_bit(53), false) }
#[test] fn get_bit54_low() { let b = KeccakWord64(0xFFBFFFFFFFFFFFFF); assert_eq!(b.get_bit(54), false) }
#[test] fn get_bit55_low() { let b = KeccakWord64(0xFF7FFFFFFFFFFFFF); assert_eq!(b.get_bit(55), false) }
#[test] fn get_bit56_low() { let b = KeccakWord64(0xFEFFFFFFFFFFFFFF); assert_eq!(b.get_bit(56), false) }
#[test] fn get_bit57_low() { let b = KeccakWord64(0xFDFFFFFFFFFFFFFF); assert_eq!(b.get_bit(57), false) }
#[test] fn get_bit58_low() { let b = KeccakWord64(0xFBFFFFFFFFFFFFFF); assert_eq!(b.get_bit(58), false) }
#[test] fn get_bit59_low() { let b = KeccakWord64(0xF7FFFFFFFFFFFFFF); assert_eq!(b.get_bit(59), false) }
#[test] fn get_bit60_low() { let b = KeccakWord64(0xEFFFFFFFFFFFFFFF); assert_eq!(b.get_bit(60), false) }
#[test] fn get_bit61_low() { let b = KeccakWord64(0xDFFFFFFFFFFFFFFF); assert_eq!(b.get_bit(61), false) }
#[test] fn get_bit62_low() { let b = KeccakWord64(0xBFFFFFFFFFFFFFFF); assert_eq!(b.get_bit(62), false) }
#[test] fn get_bit63_low() { let b = KeccakWord64(0x7FFFFFFFFFFFFFFF); assert_eq!(b.get_bit(63), false) }
#[test] fn get_byte0_high() { let b = KeccakWord64(0x00000000000000FF); assert_eq!(b.get_byte(0), 0xFF) }
#[test] fn get_byte1_high() { let b = KeccakWord64(0x000000000000FF00); assert_eq!(b.get_byte(1), 0xFF) }
#[test] fn get_byte2_high() { let b = KeccakWord64(0x0000000000FF0000); assert_eq!(b.get_byte(2), 0xFF) }
#[test] fn get_byte3_high() { let b = KeccakWord64(0x00000000FF000000); assert_eq!(b.get_byte(3), 0xFF) }
#[test] fn get_byte4_high() { let b = KeccakWord64(0x000000FF00000000); assert_eq!(b.get_byte(4), 0xFF) }
#[test] fn get_byte5_high() { let b = KeccakWord64(0x0000FF0000000000); assert_eq!(b.get_byte(5), 0xFF) }
#[test] fn get_byte6_high() { let b = KeccakWord64(0x00FF000000000000); assert_eq!(b.get_byte(6), 0xFF) }
#[test] fn get_byte7_high() { let b = KeccakWord64(0xFF00000000000000); assert_eq!(b.get_byte(7), 0xFF) }
#[test] fn get_byte0_low() { let b = KeccakWord64(0xFFFFFFFFFFFFFF00); assert_eq!(b.get_byte(0), 0x00) }
#[test] fn get_byte1_low() { let b = KeccakWord64(0xFFFFFFFFFFFF00FF); assert_eq!(b.get_byte(1), 0x00) }
#[test] fn get_byte2_low() { let b = KeccakWord64(0xFFFFFFFFFF00FFFF); assert_eq!(b.get_byte(2), 0x00) }
#[test] fn get_byte3_low() { let b = KeccakWord64(0xFFFFFFFF00FFFFFF); assert_eq!(b.get_byte(3), 0x00) }
#[test] fn get_byte4_low() { let b = KeccakWord64(0xFFFFFF00FFFFFFFF); assert_eq!(b.get_byte(4), 0x00) }
#[test] fn get_byte5_low() { let b = KeccakWord64(0xFFFF00FFFFFFFFFF); assert_eq!(b.get_byte(5), 0x00) }
#[test] fn get_byte6_low() { let b = KeccakWord64(0xFF00FFFFFFFFFFFF); assert_eq!(b.get_byte(6), 0x00) }
#[test] fn get_byte7_low() { let b = KeccakWord64(0x00FFFFFFFFFFFFFF); assert_eq!(b.get_byte(7), 0x00) }
#[test] fn set_bit0_high() { let mut b = KeccakWord64::default(); b.set_bit(0, true); assert_eq!(b, KeccakWord64(0x0000000000000001)); }
#[test] fn set_bit1_high() { let mut b = KeccakWord64::default(); b.set_bit(1, true); assert_eq!(b, KeccakWord64(0x0000000000000002)); }
#[test] fn set_bit2_high() { let mut b = KeccakWord64::default(); b.set_bit(2, true); assert_eq!(b, KeccakWord64(0x0000000000000004)); }
#[test] fn set_bit3_high() { let mut b = KeccakWord64::default(); b.set_bit(3, true); assert_eq!(b, KeccakWord64(0x0000000000000008)); }
#[test] fn set_bit4_high() { let mut b = KeccakWord64::default(); b.set_bit(4, true); assert_eq!(b, KeccakWord64(0x0000000000000010)); }
#[test] fn set_bit5_high() { let mut b = KeccakWord64::default(); b.set_bit(5, true); assert_eq!(b, KeccakWord64(0x0000000000000020)); }
#[test] fn set_bit6_high() { let mut b = KeccakWord64::default(); b.set_bit(6, true); assert_eq!(b, KeccakWord64(0x0000000000000040)); }
#[test] fn set_bit7_high() { let mut b = KeccakWord64::default(); b.set_bit(7, true); assert_eq!(b, KeccakWord64(0x0000000000000080)); }
#[test] fn set_bit8_high() { let mut b = KeccakWord64::default(); b.set_bit(8, true); assert_eq!(b, KeccakWord64(0x0000000000000100)); }
#[test] fn set_bit9_high() { let mut b = KeccakWord64::default(); b.set_bit(9, true); assert_eq!(b, KeccakWord64(0x0000000000000200)); }
#[test] fn set_bit10_high() { let mut b = KeccakWord64::default(); b.set_bit(10, true); assert_eq!(b, KeccakWord64(0x0000000000000400)); }
#[test] fn set_bit11_high() { let mut b = KeccakWord64::default(); b.set_bit(11, true); assert_eq!(b, KeccakWord64(0x0000000000000800)); }
#[test] fn set_bit12_high() { let mut b = KeccakWord64::default(); b.set_bit(12, true); assert_eq!(b, KeccakWord64(0x0000000000001000)); }
#[test] fn set_bit13_high() { let mut b = KeccakWord64::default(); b.set_bit(13, true); assert_eq!(b, KeccakWord64(0x0000000000002000)); }
#[test] fn set_bit14_high() { let mut b = KeccakWord64::default(); b.set_bit(14, true); assert_eq!(b, KeccakWord64(0x0000000000004000)); }
#[test] fn set_bit15_high() { let mut b = KeccakWord64::default(); b.set_bit(15, true); assert_eq!(b, KeccakWord64(0x0000000000008000)); }
#[test] fn set_bit16_high() { let mut b = KeccakWord64::default(); b.set_bit(16, true); assert_eq!(b, KeccakWord64(0x0000000000010000)); }
#[test] fn set_bit17_high() { let mut b = KeccakWord64::default(); b.set_bit(17, true); assert_eq!(b, KeccakWord64(0x0000000000020000)); }
#[test] fn set_bit18_high() { let mut b = KeccakWord64::default(); b.set_bit(18, true); assert_eq!(b, KeccakWord64(0x0000000000040000)); }
#[test] fn set_bit19_high() { let mut b = KeccakWord64::default(); b.set_bit(19, true); assert_eq!(b, KeccakWord64(0x0000000000080000)); }
#[test] fn set_bit20_high() { let mut b = KeccakWord64::default(); b.set_bit(20, true); assert_eq!(b, KeccakWord64(0x0000000000100000)); }
#[test] fn set_bit21_high() { let mut b = KeccakWord64::default(); b.set_bit(21, true); assert_eq!(b, KeccakWord64(0x0000000000200000)); }
#[test] fn set_bit22_high() { let mut b = KeccakWord64::default(); b.set_bit(22, true); assert_eq!(b, KeccakWord64(0x0000000000400000)); }
#[test] fn set_bit23_high() { let mut b = KeccakWord64::default(); b.set_bit(23, true); assert_eq!(b, KeccakWord64(0x0000000000800000)); }
#[test] fn set_bit24_high() { let mut b = KeccakWord64::default(); b.set_bit(24, true); assert_eq!(b, KeccakWord64(0x0000000001000000)); }
#[test] fn set_bit25_high() { let mut b = KeccakWord64::default(); b.set_bit(25, true); assert_eq!(b, KeccakWord64(0x0000000002000000)); }
#[test] fn set_bit26_high() { let mut b = KeccakWord64::default(); b.set_bit(26, true); assert_eq!(b, KeccakWord64(0x0000000004000000)); }
#[test] fn set_bit27_high() { let mut b = KeccakWord64::default(); b.set_bit(27, true); assert_eq!(b, KeccakWord64(0x0000000008000000)); }
#[test] fn set_bit28_high() { let mut b = KeccakWord64::default(); b.set_bit(28, true); assert_eq!(b, KeccakWord64(0x0000000010000000)); }
#[test] fn set_bit29_high() { let mut b = KeccakWord64::default(); b.set_bit(29, true); assert_eq!(b, KeccakWord64(0x0000000020000000)); }
#[test] fn set_bit30_high() { let mut b = KeccakWord64::default(); b.set_bit(30, true); assert_eq!(b, KeccakWord64(0x0000000040000000)); }
#[test] fn set_bit31_high() { let mut b = KeccakWord64::default(); b.set_bit(31, true); assert_eq!(b, KeccakWord64(0x0000000080000000)); }
#[test] fn set_bit32_high() { let mut b = KeccakWord64::default(); b.set_bit(32, true); assert_eq!(b, KeccakWord64(0x0000000100000000)); }
#[test] fn set_bit33_high() { let mut b = KeccakWord64::default(); b.set_bit(33, true); assert_eq!(b, KeccakWord64(0x0000000200000000)); }
#[test] fn set_bit34_high() { let mut b = KeccakWord64::default(); b.set_bit(34, true); assert_eq!(b, KeccakWord64(0x0000000400000000)); }
#[test] fn set_bit35_high() { let mut b = KeccakWord64::default(); b.set_bit(35, true); assert_eq!(b, KeccakWord64(0x0000000800000000)); }
#[test] fn set_bit36_high() { let mut b = KeccakWord64::default(); b.set_bit(36, true); assert_eq!(b, KeccakWord64(0x0000001000000000)); }
#[test] fn set_bit37_high() { let mut b = KeccakWord64::default(); b.set_bit(37, true); assert_eq!(b, KeccakWord64(0x0000002000000000)); }
#[test] fn set_bit38_high() { let mut b = KeccakWord64::default(); b.set_bit(38, true); assert_eq!(b, KeccakWord64(0x0000004000000000)); }
#[test] fn set_bit39_high() { let mut b = KeccakWord64::default(); b.set_bit(39, true); assert_eq!(b, KeccakWord64(0x0000008000000000)); }
#[test] fn set_bit40_high() { let mut b = KeccakWord64::default(); b.set_bit(40, true); assert_eq!(b, KeccakWord64(0x0000010000000000)); }
#[test] fn set_bit41_high() { let mut b = KeccakWord64::default(); b.set_bit(41, true); assert_eq!(b, KeccakWord64(0x0000020000000000)); }
#[test] fn set_bit42_high() { let mut b = KeccakWord64::default(); b.set_bit(42, true); assert_eq!(b, KeccakWord64(0x0000040000000000)); }
#[test] fn set_bit43_high() { let mut b = KeccakWord64::default(); b.set_bit(43, true); assert_eq!(b, KeccakWord64(0x0000080000000000)); }
#[test] fn set_bit44_high() { let mut b = KeccakWord64::default(); b.set_bit(44, true); assert_eq!(b, KeccakWord64(0x0000100000000000)); }
#[test] fn set_bit45_high() { let mut b = KeccakWord64::default(); b.set_bit(45, true); assert_eq!(b, KeccakWord64(0x0000200000000000)); }
#[test] fn set_bit46_high() { let mut b = KeccakWord64::default(); b.set_bit(46, true); assert_eq!(b, KeccakWord64(0x0000400000000000)); }
#[test] fn set_bit47_high() { let mut b = KeccakWord64::default(); b.set_bit(47, true); assert_eq!(b, KeccakWord64(0x0000800000000000)); }
#[test] fn set_bit48_high() { let mut b = KeccakWord64::default(); b.set_bit(48, true); assert_eq!(b, KeccakWord64(0x0001000000000000)); }
#[test] fn set_bit49_high() { let mut b = KeccakWord64::default(); b.set_bit(49, true); assert_eq!(b, KeccakWord64(0x0002000000000000)); }
#[test] fn set_bit50_high() { let mut b = KeccakWord64::default(); b.set_bit(50, true); assert_eq!(b, KeccakWord64(0x0004000000000000)); }
#[test] fn set_bit51_high() { let mut b = KeccakWord64::default(); b.set_bit(51, true); assert_eq!(b, KeccakWord64(0x0008000000000000)); }
#[test] fn set_bit52_high() { let mut b = KeccakWord64::default(); b.set_bit(52, true); assert_eq!(b, KeccakWord64(0x0010000000000000)); }
#[test] fn set_bit53_high() { let mut b = KeccakWord64::default(); b.set_bit(53, true); assert_eq!(b, KeccakWord64(0x0020000000000000)); }
#[test] fn set_bit54_high() { let mut b = KeccakWord64::default(); b.set_bit(54, true); assert_eq!(b, KeccakWord64(0x0040000000000000)); }
#[test] fn set_bit55_high() { let mut b = KeccakWord64::default(); b.set_bit(55, true); assert_eq!(b, KeccakWord64(0x0080000000000000)); }
#[test] fn set_bit56_high() { let mut b = KeccakWord64::default(); b.set_bit(56, true); assert_eq!(b, KeccakWord64(0x0100000000000000)); }
#[test] fn set_bit57_high() { let mut b = KeccakWord64::default(); b.set_bit(57, true); assert_eq!(b, KeccakWord64(0x0200000000000000)); }
#[test] fn set_bit58_high() { let mut b = KeccakWord64::default(); b.set_bit(58, true); assert_eq!(b, KeccakWord64(0x0400000000000000)); }
#[test] fn set_bit59_high() { let mut b = KeccakWord64::default(); b.set_bit(59, true); assert_eq!(b, KeccakWord64(0x0800000000000000)); }
#[test] fn set_bit60_high() { let mut b = KeccakWord64::default(); b.set_bit(60, true); assert_eq!(b, KeccakWord64(0x1000000000000000)); }
#[test] fn set_bit61_high() { let mut b = KeccakWord64::default(); b.set_bit(61, true); assert_eq!(b, KeccakWord64(0x2000000000000000)); }
#[test] fn set_bit62_high() { let mut b = KeccakWord64::default(); b.set_bit(62, true); assert_eq!(b, KeccakWord64(0x4000000000000000)); }
#[test] fn set_bit63_high() { let mut b = KeccakWord64::default(); b.set_bit(63, true); assert_eq!(b, KeccakWord64(0x8000000000000000)); }
#[test] fn set_bit0_low() { let mut b = !KeccakWord64::default(); b.set_bit(0, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFFFFFFFFE)); }
#[test] fn set_bit1_low() { let mut b = !KeccakWord64::default(); b.set_bit(1, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFFFFFFFFD)); }
#[test] fn set_bit2_low() { let mut b = !KeccakWord64::default(); b.set_bit(2, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFFFFFFFFB)); }
#[test] fn set_bit3_low() { let mut b = !KeccakWord64::default(); b.set_bit(3, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFFFFFFFF7)); }
#[test] fn set_bit4_low() { let mut b = !KeccakWord64::default(); b.set_bit(4, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFFFFFFFEF)); }
#[test] fn set_bit5_low() { let mut b = !KeccakWord64::default(); b.set_bit(5, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFFFFFFFDF)); }
#[test] fn set_bit6_low() { let mut b = !KeccakWord64::default(); b.set_bit(6, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFFFFFFFBF)); }
#[test] fn set_bit7_low() { let mut b = !KeccakWord64::default(); b.set_bit(7, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFFFFFFF7F)); }
#[test] fn set_bit8_low() { let mut b = !KeccakWord64::default(); b.set_bit(8, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFFFFFFEFF)); }
#[test] fn set_bit9_low() { let mut b = !KeccakWord64::default(); b.set_bit(9, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFFFFFFDFF)); }
#[test] fn set_bit10_low() { let mut b = !KeccakWord64::default(); b.set_bit(10, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFFFFFFBFF)); }
#[test] fn set_bit11_low() { let mut b = !KeccakWord64::default(); b.set_bit(11, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFFFFFF7FF)); }
#[test] fn set_bit12_low() { let mut b = !KeccakWord64::default(); b.set_bit(12, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFFFFFEFFF)); }
#[test] fn set_bit13_low() { let mut b = !KeccakWord64::default(); b.set_bit(13, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFFFFFDFFF)); }
#[test] fn set_bit14_low() { let mut b = !KeccakWord64::default(); b.set_bit(14, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFFFFFBFFF)); }
#[test] fn set_bit15_low() { let mut b = !KeccakWord64::default(); b.set_bit(15, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFFFFF7FFF)); }
#[test] fn set_bit16_low() { let mut b = !KeccakWord64::default(); b.set_bit(16, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFFFFEFFFF)); }
#[test] fn set_bit17_low() { let mut b = !KeccakWord64::default(); b.set_bit(17, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFFFFDFFFF)); }
#[test] fn set_bit18_low() { let mut b = !KeccakWord64::default(); b.set_bit(18, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFFFFBFFFF)); }
#[test] fn set_bit19_low() { let mut b = !KeccakWord64::default(); b.set_bit(19, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFFFF7FFFF)); }
#[test] fn set_bit20_low() { let mut b = !KeccakWord64::default(); b.set_bit(20, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFFFEFFFFF)); }
#[test] fn set_bit21_low() { let mut b = !KeccakWord64::default(); b.set_bit(21, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFFFDFFFFF)); }
#[test] fn set_bit22_low() { let mut b = !KeccakWord64::default(); b.set_bit(22, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFFFBFFFFF)); }
#[test] fn set_bit23_low() { let mut b = !KeccakWord64::default(); b.set_bit(23, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFFF7FFFFF)); }
#[test] fn set_bit24_low() { let mut b = !KeccakWord64::default(); b.set_bit(24, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFFEFFFFFF)); }
#[test] fn set_bit25_low() { let mut b = !KeccakWord64::default(); b.set_bit(25, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFFDFFFFFF)); }
#[test] fn set_bit26_low() { let mut b = !KeccakWord64::default(); b.set_bit(26, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFFBFFFFFF)); }
#[test] fn set_bit27_low() { let mut b = !KeccakWord64::default(); b.set_bit(27, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFF7FFFFFF)); }
#[test] fn set_bit28_low() { let mut b = !KeccakWord64::default(); b.set_bit(28, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFEFFFFFFF)); }
#[test] fn set_bit29_low() { let mut b = !KeccakWord64::default(); b.set_bit(29, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFDFFFFFFF)); }
#[test] fn set_bit30_low() { let mut b = !KeccakWord64::default(); b.set_bit(30, false); assert_eq!(b, KeccakWord64(0xFFFFFFFFBFFFFFFF)); }
#[test] fn set_bit31_low() { let mut b = !KeccakWord64::default(); b.set_bit(31, false); assert_eq!(b, KeccakWord64(0xFFFFFFFF7FFFFFFF)); }
#[test] fn set_bit32_low() { let mut b = !KeccakWord64::default(); b.set_bit(32, false); assert_eq!(b, KeccakWord64(0xFFFFFFFEFFFFFFFF)); }
#[test] fn set_bit33_low() { let mut b = !KeccakWord64::default(); b.set_bit(33, false); assert_eq!(b, KeccakWord64(0xFFFFFFFDFFFFFFFF)); }
#[test] fn set_bit34_low() { let mut b = !KeccakWord64::default(); b.set_bit(34, false); assert_eq!(b, KeccakWord64(0xFFFFFFFBFFFFFFFF)); }
#[test] fn set_bit35_low() { let mut b = !KeccakWord64::default(); b.set_bit(35, false); assert_eq!(b, KeccakWord64(0xFFFFFFF7FFFFFFFF)); }
#[test] fn set_bit36_low() { let mut b = !KeccakWord64::default(); b.set_bit(36, false); assert_eq!(b, KeccakWord64(0xFFFFFFEFFFFFFFFF)); }
#[test] fn set_bit37_low() { let mut b = !KeccakWord64::default(); b.set_bit(37, false); assert_eq!(b, KeccakWord64(0xFFFFFFDFFFFFFFFF)); }
#[test] fn set_bit38_low() { let mut b = !KeccakWord64::default(); b.set_bit(38, false); assert_eq!(b, KeccakWord64(0xFFFFFFBFFFFFFFFF)); }
#[test] fn set_bit39_low() { let mut b = !KeccakWord64::default(); b.set_bit(39, false); assert_eq!(b, KeccakWord64(0xFFFFFF7FFFFFFFFF)); }
#[test] fn set_bit40_low() { let mut b = !KeccakWord64::default(); b.set_bit(40, false); assert_eq!(b, KeccakWord64(0xFFFFFEFFFFFFFFFF)); }
#[test] fn set_bit41_low() { let mut b = !KeccakWord64::default(); b.set_bit(41, false); assert_eq!(b, KeccakWord64(0xFFFFFDFFFFFFFFFF)); }
#[test] fn set_bit42_low() { let mut b = !KeccakWord64::default(); b.set_bit(42, false); assert_eq!(b, KeccakWord64(0xFFFFFBFFFFFFFFFF)); }
#[test] fn set_bit43_low() { let mut b = !KeccakWord64::default(); b.set_bit(43, false); assert_eq!(b, KeccakWord64(0xFFFFF7FFFFFFFFFF)); }
#[test] fn set_bit44_low() { let mut b = !KeccakWord64::default(); b.set_bit(44, false); assert_eq!(b, KeccakWord64(0xFFFFEFFFFFFFFFFF)); }
#[test] fn set_bit45_low() { let mut b = !KeccakWord64::default(); b.set_bit(45, false); assert_eq!(b, KeccakWord64(0xFFFFDFFFFFFFFFFF)); }
#[test] fn set_bit46_low() { let mut b = !KeccakWord64::default(); b.set_bit(46, false); assert_eq!(b, KeccakWord64(0xFFFFBFFFFFFFFFFF)); }
#[test] fn set_bit47_low() { let mut b = !KeccakWord64::default(); b.set_bit(47, false); assert_eq!(b, KeccakWord64(0xFFFF7FFFFFFFFFFF)); }
#[test] fn set_bit48_low() { let mut b = !KeccakWord64::default(); b.set_bit(48, false); assert_eq!(b, KeccakWord64(0xFFFEFFFFFFFFFFFF)); }
#[test] fn set_bit49_low() { let mut b = !KeccakWord64::default(); b.set_bit(49, false); assert_eq!(b, KeccakWord64(0xFFFDFFFFFFFFFFFF)); }
#[test] fn set_bit50_low() { let mut b = !KeccakWord64::default(); b.set_bit(50, false); assert_eq!(b, KeccakWord64(0xFFFBFFFFFFFFFFFF)); }
#[test] fn set_bit51_low() { let mut b = !KeccakWord64::default(); b.set_bit(51, false); assert_eq!(b, KeccakWord64(0xFFF7FFFFFFFFFFFF)); }
#[test] fn set_bit52_low() { let mut b = !KeccakWord64::default(); b.set_bit(52, false); assert_eq!(b, KeccakWord64(0xFFEFFFFFFFFFFFFF)); }
#[test] fn set_bit53_low() { let mut b = !KeccakWord64::default(); b.set_bit(53, false); assert_eq!(b, KeccakWord64(0xFFDFFFFFFFFFFFFF)); }
#[test] fn set_bit54_low() { let mut b = !KeccakWord64::default(); b.set_bit(54, false); assert_eq!(b, KeccakWord64(0xFFBFFFFFFFFFFFFF)); }
#[test] fn set_bit55_low() { let mut b = !KeccakWord64::default(); b.set_bit(55, false); assert_eq!(b, KeccakWord64(0xFF7FFFFFFFFFFFFF)); }
#[test] fn set_bit56_low() { let mut b = !KeccakWord64::default(); b.set_bit(56, false); assert_eq!(b, KeccakWord64(0xFEFFFFFFFFFFFFFF)); }
#[test] fn set_bit57_low() { let mut b = !KeccakWord64::default(); b.set_bit(57, false); assert_eq!(b, KeccakWord64(0xFDFFFFFFFFFFFFFF)); }
#[test] fn set_bit58_low() { let mut b = !KeccakWord64::default(); b.set_bit(58, false); assert_eq!(b, KeccakWord64(0xFBFFFFFFFFFFFFFF)); }
#[test] fn set_bit59_low() { let mut b = !KeccakWord64::default(); b.set_bit(59, false); assert_eq!(b, KeccakWord64(0xF7FFFFFFFFFFFFFF)); }
#[test] fn set_bit60_low() { let mut b = !KeccakWord64::default(); b.set_bit(60, false); assert_eq!(b, KeccakWord64(0xEFFFFFFFFFFFFFFF)); }
#[test] fn set_bit61_low() { let mut b = !KeccakWord64::default(); b.set_bit(61, false); assert_eq!(b, KeccakWord64(0xDFFFFFFFFFFFFFFF)); }
#[test] fn set_bit62_low() { let mut b = !KeccakWord64::default(); b.set_bit(62, false); assert_eq!(b, KeccakWord64(0xBFFFFFFFFFFFFFFF)); }
#[test] fn set_bit63_low() { let mut b = !KeccakWord64::default(); b.set_bit(63, false); assert_eq!(b, KeccakWord64(0x7FFFFFFFFFFFFFFF)); }
#[test] fn set_byte0_high() { let mut b = KeccakWord64::default(); b.set_byte(0, 0xFF); assert_eq!(b, KeccakWord64(0x00000000000000FF)); }
#[test] fn set_byte1_high() { let mut b = KeccakWord64::default(); b.set_byte(1, 0xFF); assert_eq!(b, KeccakWord64(0x000000000000FF00)); }
#[test] fn set_byte2_high() { let mut b = KeccakWord64::default(); b.set_byte(2, 0xFF); assert_eq!(b, KeccakWord64(0x0000000000FF0000)); }
#[test] fn set_byte3_high() { let mut b = KeccakWord64::default(); b.set_byte(3, 0xFF); assert_eq!(b, KeccakWord64(0x00000000FF000000)); }
#[test] fn set_byte4_high() { let mut b = KeccakWord64::default(); b.set_byte(4, 0xFF); assert_eq!(b, KeccakWord64(0x000000FF00000000)); }
#[test] fn set_byte5_high() { let mut b = KeccakWord64::default(); b.set_byte(5, 0xFF); assert_eq!(b, KeccakWord64(0x0000FF0000000000)); }
#[test] fn set_byte6_high() { let mut b = KeccakWord64::default(); b.set_byte(6, 0xFF); assert_eq!(b, KeccakWord64(0x00FF000000000000)); }
#[test] fn set_byte7_high() { let mut b = KeccakWord64::default(); b.set_byte(7, 0xFF); assert_eq!(b, KeccakWord64(0xFF00000000000000)); }
#[test] fn set_byte0_low() { let mut b = !KeccakWord64::default(); b.set_byte(0, 0x00); assert_eq!(b, KeccakWord64(0xFFFFFFFFFFFFFF00)); }
#[test] fn set_byte1_low() { let mut b = !KeccakWord64::default(); b.set_byte(1, 0x00); assert_eq!(b, KeccakWord64(0xFFFFFFFFFFFF00FF)); }
#[test] fn set_byte2_low() { let mut b = !KeccakWord64::default(); b.set_byte(2, 0x00); assert_eq!(b, KeccakWord64(0xFFFFFFFFFF00FFFF)); }
#[test] fn set_byte3_low() { let mut b = !KeccakWord64::default(); b.set_byte(3, 0x00); assert_eq!(b, KeccakWord64(0xFFFFFFFF00FFFFFF)); }
#[test] fn set_byte4_low() { let mut b = !KeccakWord64::default(); b.set_byte(4, 0x00); assert_eq!(b, KeccakWord64(0xFFFFFF00FFFFFFFF)); }
#[test] fn set_byte5_low() { let mut b = !KeccakWord64::default(); b.set_byte(5, 0x00); assert_eq!(b, KeccakWord64(0xFFFF00FFFFFFFFFF)); }
#[test] fn set_byte6_low() { let mut b = !KeccakWord64::default(); b.set_byte(6, 0x00); assert_eq!(b, KeccakWord64(0xFF00FFFFFFFFFFFF)); }
#[test] fn set_byte7_low() { let mut b = !KeccakWord64::default(); b.set_byte(7, 0x00); assert_eq!(b, KeccakWord64(0x00FFFFFFFFFFFFFF)); }
#[test] fn not1() { let b = KeccakWord64::default(); assert_eq!(!b, KeccakWord64(0xFFFFFFFFFFFFFFFF)); }
#[test] fn not2() { let b = KeccakWord64(0xFEDCBA9876543210); assert_eq!(!b, KeccakWord64(0x0123456789ABCDEF)); }
#[test] fn and1() { let b = KeccakWord64(0xFFFFFFFFFFFFFFFF); assert_eq!(b & b, b); }
#[test] fn and2() { let a = KeccakWord64(0xFEDCBA9876543210); let b = KeccakWord64(0x0123456789ABCDEF); assert_eq!(a & b, KeccakWord64(0x0000000000000000)); }
#[test] fn andassign1() { let mut b = KeccakWord64(0xFFFFFFFFFFFFFFFF); b &= b; assert_eq!(b, KeccakWord64(0xFFFFFFFFFFFFFFFF)); }
#[test] fn andassign2() { let mut b = KeccakWord64(0xFEDCBA9876543210); b &= KeccakWord64(0x0123456789ABCDEF); assert_eq!(b, KeccakWord64(0x0000000000000000)); }
#[test] fn xor1() { let b = KeccakWord64(0xFFFFFFFFFFFFFFFF); assert_eq!(b ^ b, !b); }
#[test] fn xor2() { let a = KeccakWord64(0xFEDCBA9876543210); let b = KeccakWord64(0x0123456789ABCDEF); assert_eq!(a ^ b, KeccakWord64(0xFFFFFFFFFFFFFFFF)); }
#[test] fn xorassign1() { let mut b = KeccakWord64(0xFFFFFFFFFFFFFFFF); b ^= b; assert_eq!(b, KeccakWord64(0x0000000000000000)); }
#[test] fn xorassign2() { let mut b = KeccakWord64(0xFEDCBA9876543210); b ^= KeccakWord64(0x0123456789ABCDEF); assert_eq!(b, KeccakWord64(0xFFFFFFFFFFFFFFFF)); }
#[test] fn shl1() { let b = KeccakWord64(0xFEDCBA9876543210); assert_eq!(b << 32, KeccakWord64(0x76543210FEDCBA98)); }
#[test] fn shl2() { let b = KeccakWord64(0xFEDCBA9876543210); assert_eq!(b << 21, KeccakWord64(0x530ECA86421FDB97)); }
#[test] fn shlassign1() { let mut b = KeccakWord64(0xFEDCBA9876543210); b <<= 32; assert_eq!(b, KeccakWord64(0x76543210FEDCBA98)); }
#[test] fn shlassign2() { let mut b = KeccakWord64(0xFEDCBA9876543210); b <<= 21; assert_eq!(b, KeccakWord64(0x530ECA86421FDB97)); }
#[test] fn into_array() { let b = KeccakWord64(0xFEDCBA9876543210); assert_eq!(<KeccakWord64 as Into<[u8; 8]>>::into(b), [0x10, 0x32, 0x54, 0x76, 0x98, 0xBA, 0xDC, 0xFE]); }
#[test] fn from_array() { let b = [0x10, 0x32, 0x54, 0x76, 0x98, 0xBA, 0xDC, 0xFE]; assert_eq!(KeccakWord64::from(b), KeccakWord64(0xFEDCBA9876543210)); }
