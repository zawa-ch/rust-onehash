use crate::HashFunction;
use crate::sha3::SHA3Hash256;

///	test pattern
/// (SHA3-256 expects a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a)
const TEST_PATTERN_1: &'static [u8] = b"";
///	test pattern
/// (SHA3-256 expects 80084bf2fba02475726feb2cab2d8215eab14bc6bdd8bfb2c8151257032ecd8b)
const TEST_PATTERN_2: &'static [u8] = b"a";
///	test pattern
/// (SHA3-256 expects 3a985da74fe225b2045c172d6bd390bd855f086e3e9d525b46bfe24511431532)
const TEST_PATTERN_3: &'static [u8] = b"abc";
///	test pattern
/// (SHA3-256 expects edcdb2069366e75243860c18c3a11465eca34bce6143d30c8665cefcfd32bffd)
const TEST_PATTERN_4: &'static [u8] = b"message digest";
///	test pattern
/// (SHA3-256 expects 7cab2dc765e21b241dbc1c255ce620b29f527c6d5e7f5f843e56288f0d707521)
const TEST_PATTERN_5: &'static [u8] = b"abcdefghijklmnopqrstuvwxyz";
///	test pattern
/// (SHA3-256 expects a79d6a9da47f04a3b9a9323ec9991f2105d4c78a7bc7beeb103855a7a11dfb9f)
const TEST_PATTERN_6: &'static [u8] = b"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
///	test pattern
/// (SHA3-256 expects 293e5ce4ce54ee71990ab06e511b7ccd62722b1beb414f5ff65c8274e0f5be1d)
const TEST_PATTERN_7: &'static [u8] = b"12345678901234567890123456789012345678901234567890123456789012345678901234567890";
///	test pattern
/// (SHA3-256 expects a80f839cd4f83f6c3dafc87feae470045e4eb0d366397d5c6ce34ba1739f734d)
const TEST_PATTERN_8: &'static [u8] = b"The quick brown fox jumps over the lazy dog.";
///	test pattern
/// (SHA3-256 expects 587413ef1ae9dd3a9a61173051c374975453092cc459d608c1d9fca5d3ad3e46)
///	Quoted from `fortune` Napoleon I
const TEST_PATTERN_9: &'static [u8] = b"Ten persons who speak make more noise than ten thousand who are silent.";
///	test pattern
/// (SHA3-256 expects 4c89d055c9193344d7a361e3eb9d64a2effe4b9be657c071ee2b9b5c6387da85)
///	Quoted from `fortune` T. Cheatham
const TEST_PATTERN_10: &'static [u8] = b"If a group of N persons implements a COBOL compiler, there will be N-1 passes.  Someone in the group has to be the manager.";
///	test pattern
/// (SHA3-256 expects 6b5c18e06fc9220709e76650ed899b1171d5288091b5922c01d7cebe889764ca)
///	Quoted from `fortune`
const TEST_PATTERN_11: &'static [u8] = b"The time was the 19th of May, 1780.  The place was Hartford, Connecticut. The day has gone down in New England history as a terrible foretaste of Judgement Day.  For at noon the skies turned from blue to grey and by mid-afternoon had blackened over so densely that, in that religious age, men fell on their knees and begged a final blessing before the end came. The Connecticut House of Representatives was in session.  And, as some of the men fell down and others clamored for an immediate adjournment, the Speaker of the House, one Col. Davenport, came to his feet.  He silenced them and said these words: \"The day of judgment is either approaching or it is not.  If it is not, there is no cause for adjournment.  If it is, I choose to be found doing my duty.  I wish therefore that candles may be brought.\"  -- Alistair Cooke";

#[test]
fn pattern01() {
    let mut f = SHA3Hash256::new();
    f.put_message(TEST_PATTERN_1);
    assert_eq!(f.digest(), [0xa7, 0xff, 0xc6, 0xf8, 0xbf, 0x1e, 0xd7, 0x66, 0x51, 0xc1, 0x47, 0x56, 0xa0, 0x61, 0xd6, 0x62, 0xf5, 0x80, 0xff, 0x4d, 0xe4, 0x3b, 0x49, 0xfa, 0x82, 0xd8, 0x0a, 0x4b, 0x80, 0xf8, 0x43, 0x4a]);
}
#[test]
fn pattern02() {
    let mut f = SHA3Hash256::new();
    f.put_message(TEST_PATTERN_2);
    assert_eq!(f.digest(), [0x80, 0x08, 0x4b, 0xf2, 0xfb, 0xa0, 0x24, 0x75, 0x72, 0x6f, 0xeb, 0x2c, 0xab, 0x2d, 0x82, 0x15, 0xea, 0xb1, 0x4b, 0xc6, 0xbd, 0xd8, 0xbf, 0xb2, 0xc8, 0x15, 0x12, 0x57, 0x03, 0x2e, 0xcd, 0x8b]);
}
#[test]
fn pattern03() {
    let mut f = SHA3Hash256::new();
    f.put_message(TEST_PATTERN_3);
    assert_eq!(f.digest(), [0x3a, 0x98, 0x5d, 0xa7, 0x4f, 0xe2, 0x25, 0xb2, 0x04, 0x5c, 0x17, 0x2d, 0x6b, 0xd3, 0x90, 0xbd, 0x85, 0x5f, 0x08, 0x6e, 0x3e, 0x9d, 0x52, 0x5b, 0x46, 0xbf, 0xe2, 0x45, 0x11, 0x43, 0x15, 0x32]);
}
#[test]
fn pattern04() {
    let mut f = SHA3Hash256::new();
    f.put_message(TEST_PATTERN_4);
    assert_eq!(f.digest(), [0xed, 0xcd, 0xb2, 0x06, 0x93, 0x66, 0xe7, 0x52, 0x43, 0x86, 0x0c, 0x18, 0xc3, 0xa1, 0x14, 0x65, 0xec, 0xa3, 0x4b, 0xce, 0x61, 0x43, 0xd3, 0x0c, 0x86, 0x65, 0xce, 0xfc, 0xfd, 0x32, 0xbf, 0xfd]);
}
#[test]
fn pattern05() {
    let mut f = SHA3Hash256::new();
    f.put_message(TEST_PATTERN_5);
    assert_eq!(f.digest(), [0x7c, 0xab, 0x2d, 0xc7, 0x65, 0xe2, 0x1b, 0x24, 0x1d, 0xbc, 0x1c, 0x25, 0x5c, 0xe6, 0x20, 0xb2, 0x9f, 0x52, 0x7c, 0x6d, 0x5e, 0x7f, 0x5f, 0x84, 0x3e, 0x56, 0x28, 0x8f, 0x0d, 0x70, 0x75, 0x21]);
}
#[test]
fn pattern06() {
    let mut f = SHA3Hash256::new();
    f.put_message(TEST_PATTERN_6);
    assert_eq!(f.digest(), [0xa7, 0x9d, 0x6a, 0x9d, 0xa4, 0x7f, 0x04, 0xa3, 0xb9, 0xa9, 0x32, 0x3e, 0xc9, 0x99, 0x1f, 0x21, 0x05, 0xd4, 0xc7, 0x8a, 0x7b, 0xc7, 0xbe, 0xeb, 0x10, 0x38, 0x55, 0xa7, 0xa1, 0x1d, 0xfb, 0x9f]);
}
#[test]
fn pattern07() {
    let mut f = SHA3Hash256::new();
    f.put_message(TEST_PATTERN_7);
    assert_eq!(f.digest(), [0x29, 0x3e, 0x5c, 0xe4, 0xce, 0x54, 0xee, 0x71, 0x99, 0x0a, 0xb0, 0x6e, 0x51, 0x1b, 0x7c, 0xcd, 0x62, 0x72, 0x2b, 0x1b, 0xeb, 0x41, 0x4f, 0x5f, 0xf6, 0x5c, 0x82, 0x74, 0xe0, 0xf5, 0xbe, 0x1d]);
}
#[test]
fn pattern08() {
    let mut f = SHA3Hash256::new();
    f.put_message(TEST_PATTERN_8);
    assert_eq!(f.digest(), [0xa8, 0x0f, 0x83, 0x9c, 0xd4, 0xf8, 0x3f, 0x6c, 0x3d, 0xaf, 0xc8, 0x7f, 0xea, 0xe4, 0x70, 0x04, 0x5e, 0x4e, 0xb0, 0xd3, 0x66, 0x39, 0x7d, 0x5c, 0x6c, 0xe3, 0x4b, 0xa1, 0x73, 0x9f, 0x73, 0x4d]);
}
#[test]
fn pattern09() {
    let mut f = SHA3Hash256::new();
    f.put_message(TEST_PATTERN_9);
    assert_eq!(f.digest(), [0x58, 0x74, 0x13, 0xef, 0x1a, 0xe9, 0xdd, 0x3a, 0x9a, 0x61, 0x17, 0x30, 0x51, 0xc3, 0x74, 0x97, 0x54, 0x53, 0x09, 0x2c, 0xc4, 0x59, 0xd6, 0x08, 0xc1, 0xd9, 0xfc, 0xa5, 0xd3, 0xad, 0x3e, 0x46]);
}
#[test]
fn pattern10() {
    let mut f = SHA3Hash256::new();
    f.put_message(TEST_PATTERN_10);
    assert_eq!(f.digest(), [0x4c, 0x89, 0xd0, 0x55, 0xc9, 0x19, 0x33, 0x44, 0xd7, 0xa3, 0x61, 0xe3, 0xeb, 0x9d, 0x64, 0xa2, 0xef, 0xfe, 0x4b, 0x9b, 0xe6, 0x57, 0xc0, 0x71, 0xee, 0x2b, 0x9b, 0x5c, 0x63, 0x87, 0xda, 0x85]);
}
#[test]
fn pattern11() {
    let mut f = SHA3Hash256::new();
    f.put_message(TEST_PATTERN_11);
    assert_eq!(f.digest(), [0x6b, 0x5c, 0x18, 0xe0, 0x6f, 0xc9, 0x22, 0x07, 0x09, 0xe7, 0x66, 0x50, 0xed, 0x89, 0x9b, 0x11, 0x71, 0xd5, 0x28, 0x80, 0x91, 0xb5, 0x92, 0x2c, 0x01, 0xd7, 0xce, 0xbe, 0x88, 0x97, 0x64, 0xca]);
}
