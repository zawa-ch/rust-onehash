use crate::HashFunction;
use crate::sha3::SHA3Hash384;

///	test pattern
/// (SHA3-384 expects 0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004)
const TEST_PATTERN_1: &'static [u8] = b"";
///	test pattern
/// (SHA3-384 expects 1815f774f320491b48569efec794d249eeb59aae46d22bf77dafe25c5edc28d7ea44f93ee1234aa88f61c91912a4ccd9)
const TEST_PATTERN_2: &'static [u8] = b"a";
///	test pattern
/// (SHA3-384 expects ec01498288516fc926459f58e2c6ad8df9b473cb0fc08c2596da7cf0e49be4b298d88cea927ac7f539f1edf228376d25)
const TEST_PATTERN_3: &'static [u8] = b"abc";
///	test pattern
/// (SHA3-384 expects d9519709f44af73e2c8e291109a979de3d61dc02bf69def7fbffdfffe662751513f19ad57e17d4b93ba1e484fc1980d5)
const TEST_PATTERN_4: &'static [u8] = b"message digest";
///	test pattern
/// (SHA3-384 expects fed399d2217aaf4c717ad0c5102c15589e1c990cc2b9a5029056a7f7485888d6ab65db2370077a5cadb53fc9280d278f)
const TEST_PATTERN_5: &'static [u8] = b"abcdefghijklmnopqrstuvwxyz";
///	test pattern
/// (SHA3-384 expects d5b972302f5080d0830e0de7b6b2cf383665a008f4c4f386a61112652c742d20cb45aa51bd4f542fc733e2719e999291)
const TEST_PATTERN_6: &'static [u8] = b"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
///	test pattern
/// (SHA3-384 expects 3c213a17f514638acb3bf17f109f3e24c16f9f14f085b52a2f2b81adc0db83df1a58db2ce013191b8ba72d8fae7e2a5e)
const TEST_PATTERN_7: &'static [u8] = b"12345678901234567890123456789012345678901234567890123456789012345678901234567890";
///	test pattern
/// (SHA3-384 expects 1a34d81695b622df178bc74df7124fe12fac0f64ba5250b78b99c1273d4b080168e10652894ecad5f1f4d5b965437fb9)
const TEST_PATTERN_8: &'static [u8] = b"The quick brown fox jumps over the lazy dog.";
///	test pattern
/// (SHA3-384 expects 61c6463b13b7abc45b7faef9adbf1654b6010e2c504e7336a8715eb585ee5f3b07ae762b9b8db27373800c715efff586)
///	Quoted from `fortune` Napoleon I
const TEST_PATTERN_9: &'static [u8] = b"Ten persons who speak make more noise than ten thousand who are silent.";
///	test pattern
/// (SHA3-384 expects 38412905c08ad5b619bbff271e1a8d86a4cc615987b1c115724387e88bf99b2ecdbc5c4f15d01036970bd51a1ededb38)
///	Quoted from `fortune` T. Cheatham
const TEST_PATTERN_10: &'static [u8] = b"If a group of N persons implements a COBOL compiler, there will be N-1 passes.  Someone in the group has to be the manager.";
///	test pattern
/// (SHA3-384 expects c3cb3673a2bb938e480b3cd72bb1aa3ad050823f2ff15e81486960b3c263c53d0a5db498bdfb87ac7ba5910734bdaea9)
///	Quoted from `fortune`
const TEST_PATTERN_11: &'static [u8] = b"The time was the 19th of May, 1780.  The place was Hartford, Connecticut. The day has gone down in New England history as a terrible foretaste of Judgement Day.  For at noon the skies turned from blue to grey and by mid-afternoon had blackened over so densely that, in that religious age, men fell on their knees and begged a final blessing before the end came. The Connecticut House of Representatives was in session.  And, as some of the men fell down and others clamored for an immediate adjournment, the Speaker of the House, one Col. Davenport, came to his feet.  He silenced them and said these words: \"The day of judgment is either approaching or it is not.  If it is not, there is no cause for adjournment.  If it is, I choose to be found doing my duty.  I wish therefore that candles may be brought.\"  -- Alistair Cooke";

#[test]
fn pattern01() {
    let mut f = SHA3Hash384::new();
    f.put_message(TEST_PATTERN_1);
    assert_eq!(f.digest(), [0x0c, 0x63, 0xa7, 0x5b, 0x84, 0x5e, 0x4f, 0x7d, 0x01, 0x10, 0x7d, 0x85, 0x2e, 0x4c, 0x24, 0x85, 0xc5, 0x1a, 0x50, 0xaa, 0xaa, 0x94, 0xfc, 0x61, 0x99, 0x5e, 0x71, 0xbb, 0xee, 0x98, 0x3a, 0x2a, 0xc3, 0x71, 0x38, 0x31, 0x26, 0x4a, 0xdb, 0x47, 0xfb, 0x6b, 0xd1, 0xe0, 0x58, 0xd5, 0xf0, 0x04]);
}
#[test]
fn pattern02() {
    let mut f = SHA3Hash384::new();
    f.put_message(TEST_PATTERN_2);
    assert_eq!(f.digest(), [0x18, 0x15, 0xf7, 0x74, 0xf3, 0x20, 0x49, 0x1b, 0x48, 0x56, 0x9e, 0xfe, 0xc7, 0x94, 0xd2, 0x49, 0xee, 0xb5, 0x9a, 0xae, 0x46, 0xd2, 0x2b, 0xf7, 0x7d, 0xaf, 0xe2, 0x5c, 0x5e, 0xdc, 0x28, 0xd7, 0xea, 0x44, 0xf9, 0x3e, 0xe1, 0x23, 0x4a, 0xa8, 0x8f, 0x61, 0xc9, 0x19, 0x12, 0xa4, 0xcc, 0xd9]);
}
#[test]
fn pattern03() {
    let mut f = SHA3Hash384::new();
    f.put_message(TEST_PATTERN_3);
    assert_eq!(f.digest(), [0xec, 0x01, 0x49, 0x82, 0x88, 0x51, 0x6f, 0xc9, 0x26, 0x45, 0x9f, 0x58, 0xe2, 0xc6, 0xad, 0x8d, 0xf9, 0xb4, 0x73, 0xcb, 0x0f, 0xc0, 0x8c, 0x25, 0x96, 0xda, 0x7c, 0xf0, 0xe4, 0x9b, 0xe4, 0xb2, 0x98, 0xd8, 0x8c, 0xea, 0x92, 0x7a, 0xc7, 0xf5, 0x39, 0xf1, 0xed, 0xf2, 0x28, 0x37, 0x6d, 0x25]);
}
#[test]
fn pattern04() {
    let mut f = SHA3Hash384::new();
    f.put_message(TEST_PATTERN_4);
    assert_eq!(f.digest(), [0xd9, 0x51, 0x97, 0x09, 0xf4, 0x4a, 0xf7, 0x3e, 0x2c, 0x8e, 0x29, 0x11, 0x09, 0xa9, 0x79, 0xde, 0x3d, 0x61, 0xdc, 0x02, 0xbf, 0x69, 0xde, 0xf7, 0xfb, 0xff, 0xdf, 0xff, 0xe6, 0x62, 0x75, 0x15, 0x13, 0xf1, 0x9a, 0xd5, 0x7e, 0x17, 0xd4, 0xb9, 0x3b, 0xa1, 0xe4, 0x84, 0xfc, 0x19, 0x80, 0xd5]);
}
#[test]
fn pattern05() {
    let mut f = SHA3Hash384::new();
    f.put_message(TEST_PATTERN_5);
    assert_eq!(f.digest(), [0xfe, 0xd3, 0x99, 0xd2, 0x21, 0x7a, 0xaf, 0x4c, 0x71, 0x7a, 0xd0, 0xc5, 0x10, 0x2c, 0x15, 0x58, 0x9e, 0x1c, 0x99, 0x0c, 0xc2, 0xb9, 0xa5, 0x02, 0x90, 0x56, 0xa7, 0xf7, 0x48, 0x58, 0x88, 0xd6, 0xab, 0x65, 0xdb, 0x23, 0x70, 0x07, 0x7a, 0x5c, 0xad, 0xb5, 0x3f, 0xc9, 0x28, 0x0d, 0x27, 0x8f]);
}
#[test]
fn pattern06() {
    let mut f = SHA3Hash384::new();
    f.put_message(TEST_PATTERN_6);
    assert_eq!(f.digest(), [0xd5, 0xb9, 0x72, 0x30, 0x2f, 0x50, 0x80, 0xd0, 0x83, 0x0e, 0x0d, 0xe7, 0xb6, 0xb2, 0xcf, 0x38, 0x36, 0x65, 0xa0, 0x08, 0xf4, 0xc4, 0xf3, 0x86, 0xa6, 0x11, 0x12, 0x65, 0x2c, 0x74, 0x2d, 0x20, 0xcb, 0x45, 0xaa, 0x51, 0xbd, 0x4f, 0x54, 0x2f, 0xc7, 0x33, 0xe2, 0x71, 0x9e, 0x99, 0x92, 0x91]);
}
#[test]
fn pattern07() {
    let mut f = SHA3Hash384::new();
    f.put_message(TEST_PATTERN_7);
    assert_eq!(f.digest(), [0x3c, 0x21, 0x3a, 0x17, 0xf5, 0x14, 0x63, 0x8a, 0xcb, 0x3b, 0xf1, 0x7f, 0x10, 0x9f, 0x3e, 0x24, 0xc1, 0x6f, 0x9f, 0x14, 0xf0, 0x85, 0xb5, 0x2a, 0x2f, 0x2b, 0x81, 0xad, 0xc0, 0xdb, 0x83, 0xdf, 0x1a, 0x58, 0xdb, 0x2c, 0xe0, 0x13, 0x19, 0x1b, 0x8b, 0xa7, 0x2d, 0x8f, 0xae, 0x7e, 0x2a, 0x5e]);
}
#[test]
fn pattern08() {
    let mut f = SHA3Hash384::new();
    f.put_message(TEST_PATTERN_8);
    assert_eq!(f.digest(), [0x1a, 0x34, 0xd8, 0x16, 0x95, 0xb6, 0x22, 0xdf, 0x17, 0x8b, 0xc7, 0x4d, 0xf7, 0x12, 0x4f, 0xe1, 0x2f, 0xac, 0x0f, 0x64, 0xba, 0x52, 0x50, 0xb7, 0x8b, 0x99, 0xc1, 0x27, 0x3d, 0x4b, 0x08, 0x01, 0x68, 0xe1, 0x06, 0x52, 0x89, 0x4e, 0xca, 0xd5, 0xf1, 0xf4, 0xd5, 0xb9, 0x65, 0x43, 0x7f, 0xb9]);
}
#[test]
fn pattern09() {
    let mut f = SHA3Hash384::new();
    f.put_message(TEST_PATTERN_9);
    assert_eq!(f.digest(), [0x61, 0xc6, 0x46, 0x3b, 0x13, 0xb7, 0xab, 0xc4, 0x5b, 0x7f, 0xae, 0xf9, 0xad, 0xbf, 0x16, 0x54, 0xb6, 0x01, 0x0e, 0x2c, 0x50, 0x4e, 0x73, 0x36, 0xa8, 0x71, 0x5e, 0xb5, 0x85, 0xee, 0x5f, 0x3b, 0x07, 0xae, 0x76, 0x2b, 0x9b, 0x8d, 0xb2, 0x73, 0x73, 0x80, 0x0c, 0x71, 0x5e, 0xff, 0xf5, 0x86]);
}
#[test]
fn pattern10() {
    let mut f = SHA3Hash384::new();
    f.put_message(TEST_PATTERN_10);
    assert_eq!(f.digest(), [0x38, 0x41, 0x29, 0x05, 0xc0, 0x8a, 0xd5, 0xb6, 0x19, 0xbb, 0xff, 0x27, 0x1e, 0x1a, 0x8d, 0x86, 0xa4, 0xcc, 0x61, 0x59, 0x87, 0xb1, 0xc1, 0x15, 0x72, 0x43, 0x87, 0xe8, 0x8b, 0xf9, 0x9b, 0x2e, 0xcd, 0xbc, 0x5c, 0x4f, 0x15, 0xd0, 0x10, 0x36, 0x97, 0x0b, 0xd5, 0x1a, 0x1e, 0xde, 0xdb, 0x38]);
}
#[test]
fn pattern11() {
    let mut f = SHA3Hash384::new();
    f.put_message(TEST_PATTERN_11);
    assert_eq!(f.digest(), [0xc3, 0xcb, 0x36, 0x73, 0xa2, 0xbb, 0x93, 0x8e, 0x48, 0x0b, 0x3c, 0xd7, 0x2b, 0xb1, 0xaa, 0x3a, 0xd0, 0x50, 0x82, 0x3f, 0x2f, 0xf1, 0x5e, 0x81, 0x48, 0x69, 0x60, 0xb3, 0xc2, 0x63, 0xc5, 0x3d, 0x0a, 0x5d, 0xb4, 0x98, 0xbd, 0xfb, 0x87, 0xac, 0x7b, 0xa5, 0x91, 0x07, 0x34, 0xbd, 0xae, 0xa9]);
}
