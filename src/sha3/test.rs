use crate::HashFunction;
use crate::sha3::SHA3Hash512;

///	test pattern
/// (SHA3-512 expects a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26)
const TEST_PATTERN_1: &'static [u8] = b"";
///	test pattern
/// (SHA3-512 expects 697f2d856172cb8309d6b8b97dac4de344b549d4dee61edfb4962d8698b7fa803f4f93ff24393586e28b5b957ac3d1d369420ce53332712f997bd336d09ab02a)
const TEST_PATTERN_2: &'static [u8] = b"a";
///	test pattern
/// (SHA3-512 expects b751850b1a57168a5693cd924b6b096e08f621827444f70d884f5d0240d2712e10e116e9192af3c91a7ec57647e3934057340b4cf408d5a56592f8274eec53f0)
const TEST_PATTERN_3: &'static [u8] = b"abc";
///	test pattern
/// (SHA3-512 expects 3444e155881fa15511f57726c7d7cfe80302a7433067b29d59a71415ca9dd141ac892d310bc4d78128c98fda839d18d7f0556f2fe7acb3c0cda4bff3a25f5f59)
const TEST_PATTERN_4: &'static [u8] = b"message digest";
///	test pattern
/// (SHA3-512 expects af328d17fa28753a3c9f5cb72e376b90440b96f0289e5703b729324a975ab384eda565fc92aaded143669900d761861687acdc0a5ffa358bd0571aaad80aca68)
const TEST_PATTERN_5: &'static [u8] = b"abcdefghijklmnopqrstuvwxyz";
///	test pattern
/// (SHA3-512 expects d1db17b4745b255e5eb159f66593cc9c143850979fc7a3951796aba80165aab536b46174ce19e3f707f0e5c6487f5f03084bc0ec9461691ef20113e42ad28163)
const TEST_PATTERN_6: &'static [u8] = b"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
///	test pattern
/// (SHA3-512 expects 9524b9a5536b91069526b4f6196b7e9475b4da69e01f0c855797f224cd7335ddb286fd99b9b32ffe33b59ad424cc1744f6eb59137f5fb8601932e8a8af0ae930)
const TEST_PATTERN_7: &'static [u8] = b"12345678901234567890123456789012345678901234567890123456789012345678901234567890";
///	test pattern
/// (SHA3-512 expects 18f4f4bd419603f95538837003d9d254c26c23765565162247483f65c50303597bc9ce4d289f21d1c2f1f458828e33dc442100331b35e7eb031b5d38ba6460f8)
const TEST_PATTERN_8: &'static [u8] = b"The quick brown fox jumps over the lazy dog.";
///	test pattern
/// (SHA3-512 expects 2046b754d8be7a47ebf20a06fc0874c534e774910e235273f7088e242e00870bb7cd9eee04f3e624f4a6119ccea46d26e3cf2e149154957895d5e57069fe738b)
///	Quoted from `fortune` Napoleon I
const TEST_PATTERN_9: &'static [u8] = b"Ten persons who speak make more noise than ten thousand who are silent.";
///	test pattern
/// (SHA3-512 expects 98367fe0ebceb0ac89851a2d6ce21f2b12d26b5986587f63dae803254ef9ce13c0de48de5bd1051f0c4b6683e24d2dc5543c86d0b7e01130cc9c168ed84157b1)
///	Quoted from `fortune` T. Cheatham
const TEST_PATTERN_10: &'static [u8] = b"If a group of N persons implements a COBOL compiler, there will be N-1 passes.  Someone in the group has to be the manager.";
///	test pattern
/// (SHA3-512 expects 82cd26e94973164bca1432b91288348145d477dcebac5743e79777147e16fec568e7ad7b9dff319270f3d68d8b8bc36fff821d6e2b344231afef4aeec0ff3477)
///	Quoted from `fortune`
const TEST_PATTERN_11: &'static [u8] = b"The time was the 19th of May, 1780.  The place was Hartford, Connecticut. The day has gone down in New England history as a terrible foretaste of Judgement Day.  For at noon the skies turned from blue to grey and by mid-afternoon had blackened over so densely that, in that religious age, men fell on their knees and begged a final blessing before the end came. The Connecticut House of Representatives was in session.  And, as some of the men fell down and others clamored for an immediate adjournment, the Speaker of the House, one Col. Davenport, came to his feet.  He silenced them and said these words: \"The day of judgment is either approaching or it is not.  If it is not, there is no cause for adjournment.  If it is, I choose to be found doing my duty.  I wish therefore that candles may be brought.\"  -- Alistair Cooke";

#[test]
fn f512_pattern01() {
    let mut f = SHA3Hash512::new();
    f.put_message(TEST_PATTERN_1);
    assert_eq!(f.digest(), [0xa6, 0x9f, 0x73, 0xcc, 0xa2, 0x3a, 0x9a, 0xc5, 0xc8, 0xb5, 0x67, 0xdc, 0x18, 0x5a, 0x75, 0x6e, 0x97, 0xc9, 0x82, 0x16, 0x4f, 0xe2, 0x58, 0x59, 0xe0, 0xd1, 0xdc, 0xc1, 0x47, 0x5c, 0x80, 0xa6, 0x15, 0xb2, 0x12, 0x3a, 0xf1, 0xf5, 0xf9, 0x4c, 0x11, 0xe3, 0xe9, 0x40, 0x2c, 0x3a, 0xc5, 0x58, 0xf5, 0x00, 0x19, 0x9d, 0x95, 0xb6, 0xd3, 0xe3, 0x01, 0x75, 0x85, 0x86, 0x28, 0x1d, 0xcd, 0x26]);
}
#[test]
fn f512_pattern2() {
    let mut f = SHA3Hash512::new();
    f.put_message(TEST_PATTERN_2);
    assert_eq!(f.digest(), [0x69, 0x7f, 0x2d, 0x85, 0x61, 0x72, 0xcb, 0x83, 0x09, 0xd6, 0xb8, 0xb9, 0x7d, 0xac, 0x4d, 0xe3, 0x44, 0xb5, 0x49, 0xd4, 0xde, 0xe6, 0x1e, 0xdf, 0xb4, 0x96, 0x2d, 0x86, 0x98, 0xb7, 0xfa, 0x80, 0x3f, 0x4f, 0x93, 0xff, 0x24, 0x39, 0x35, 0x86, 0xe2, 0x8b, 0x5b, 0x95, 0x7a, 0xc3, 0xd1, 0xd3, 0x69, 0x42, 0x0c, 0xe5, 0x33, 0x32, 0x71, 0x2f, 0x99, 0x7b, 0xd3, 0x36, 0xd0, 0x9a, 0xb0, 0x2a]);
}
#[test]
fn f512_pattern3() {
    let mut f = SHA3Hash512::new();
    f.put_message(TEST_PATTERN_3);
    assert_eq!(f.digest(), [0xb7, 0x51, 0x85, 0x0b, 0x1a, 0x57, 0x16, 0x8a, 0x56, 0x93, 0xcd, 0x92, 0x4b, 0x6b, 0x09, 0x6e, 0x08, 0xf6, 0x21, 0x82, 0x74, 0x44, 0xf7, 0x0d, 0x88, 0x4f, 0x5d, 0x02, 0x40, 0xd2, 0x71, 0x2e, 0x10, 0xe1, 0x16, 0xe9, 0x19, 0x2a, 0xf3, 0xc9, 0x1a, 0x7e, 0xc5, 0x76, 0x47, 0xe3, 0x93, 0x40, 0x57, 0x34, 0x0b, 0x4c, 0xf4, 0x08, 0xd5, 0xa5, 0x65, 0x92, 0xf8, 0x27, 0x4e, 0xec, 0x53, 0xf0]);
}
#[test]
fn f512_pattern4() {
    let mut f = SHA3Hash512::new();
    f.put_message(TEST_PATTERN_4);
    assert_eq!(f.digest(), [0x34, 0x44, 0xe1, 0x55, 0x88, 0x1f, 0xa1, 0x55, 0x11, 0xf5, 0x77, 0x26, 0xc7, 0xd7, 0xcf, 0xe8, 0x03, 0x02, 0xa7, 0x43, 0x30, 0x67, 0xb2, 0x9d, 0x59, 0xa7, 0x14, 0x15, 0xca, 0x9d, 0xd1, 0x41, 0xac, 0x89, 0x2d, 0x31, 0x0b, 0xc4, 0xd7, 0x81, 0x28, 0xc9, 0x8f, 0xda, 0x83, 0x9d, 0x18, 0xd7, 0xf0, 0x55, 0x6f, 0x2f, 0xe7, 0xac, 0xb3, 0xc0, 0xcd, 0xa4, 0xbf, 0xf3, 0xa2, 0x5f, 0x5f, 0x59]);
}
#[test]
fn f512_pattern5() {
    let mut f = SHA3Hash512::new();
    f.put_message(TEST_PATTERN_5);
    assert_eq!(f.digest(), [0xaf, 0x32, 0x8d, 0x17, 0xfa, 0x28, 0x75, 0x3a, 0x3c, 0x9f, 0x5c, 0xb7, 0x2e, 0x37, 0x6b, 0x90, 0x44, 0x0b, 0x96, 0xf0, 0x28, 0x9e, 0x57, 0x03, 0xb7, 0x29, 0x32, 0x4a, 0x97, 0x5a, 0xb3, 0x84, 0xed, 0xa5, 0x65, 0xfc, 0x92, 0xaa, 0xde, 0xd1, 0x43, 0x66, 0x99, 0x00, 0xd7, 0x61, 0x86, 0x16, 0x87, 0xac, 0xdc, 0x0a, 0x5f, 0xfa, 0x35, 0x8b, 0xd0, 0x57, 0x1a, 0xaa, 0xd8, 0x0a, 0xca, 0x68]);
}
#[test]
fn f512_pattern6() {
    let mut f = SHA3Hash512::new();
    f.put_message(TEST_PATTERN_6);
    assert_eq!(f.digest(), [0xd1, 0xdb, 0x17, 0xb4, 0x74, 0x5b, 0x25, 0x5e, 0x5e, 0xb1, 0x59, 0xf6, 0x65, 0x93, 0xcc, 0x9c, 0x14, 0x38, 0x50, 0x97, 0x9f, 0xc7, 0xa3, 0x95, 0x17, 0x96, 0xab, 0xa8, 0x01, 0x65, 0xaa, 0xb5, 0x36, 0xb4, 0x61, 0x74, 0xce, 0x19, 0xe3, 0xf7, 0x07, 0xf0, 0xe5, 0xc6, 0x48, 0x7f, 0x5f, 0x03, 0x08, 0x4b, 0xc0, 0xec, 0x94, 0x61, 0x69, 0x1e, 0xf2, 0x01, 0x13, 0xe4, 0x2a, 0xd2, 0x81, 0x63]);
}
#[test]
fn f512_pattern7() {
    let mut f = SHA3Hash512::new();
    f.put_message(TEST_PATTERN_7);
    assert_eq!(f.digest(), [0x95, 0x24, 0xb9, 0xa5, 0x53, 0x6b, 0x91, 0x06, 0x95, 0x26, 0xb4, 0xf6, 0x19, 0x6b, 0x7e, 0x94, 0x75, 0xb4, 0xda, 0x69, 0xe0, 0x1f, 0x0c, 0x85, 0x57, 0x97, 0xf2, 0x24, 0xcd, 0x73, 0x35, 0xdd, 0xb2, 0x86, 0xfd, 0x99, 0xb9, 0xb3, 0x2f, 0xfe, 0x33, 0xb5, 0x9a, 0xd4, 0x24, 0xcc, 0x17, 0x44, 0xf6, 0xeb, 0x59, 0x13, 0x7f, 0x5f, 0xb8, 0x60, 0x19, 0x32, 0xe8, 0xa8, 0xaf, 0x0a, 0xe9, 0x30]);
}
#[test]
fn f512_pattern8() {
    let mut f = SHA3Hash512::new();
    f.put_message(TEST_PATTERN_8);
    assert_eq!(f.digest(), [0x18, 0xf4, 0xf4, 0xbd, 0x41, 0x96, 0x03, 0xf9, 0x55, 0x38, 0x83, 0x70, 0x03, 0xd9, 0xd2, 0x54, 0xc2, 0x6c, 0x23, 0x76, 0x55, 0x65, 0x16, 0x22, 0x47, 0x48, 0x3f, 0x65, 0xc5, 0x03, 0x03, 0x59, 0x7b, 0xc9, 0xce, 0x4d, 0x28, 0x9f, 0x21, 0xd1, 0xc2, 0xf1, 0xf4, 0x58, 0x82, 0x8e, 0x33, 0xdc, 0x44, 0x21, 0x00, 0x33, 0x1b, 0x35, 0xe7, 0xeb, 0x03, 0x1b, 0x5d, 0x38, 0xba, 0x64, 0x60, 0xf8]);
}
#[test]
fn f512_pattern9() {
    let mut f = SHA3Hash512::new();
    f.put_message(TEST_PATTERN_9);
    assert_eq!(f.digest(), [0x20, 0x46, 0xb7, 0x54, 0xd8, 0xbe, 0x7a, 0x47, 0xeb, 0xf2, 0x0a, 0x06, 0xfc, 0x08, 0x74, 0xc5, 0x34, 0xe7, 0x74, 0x91, 0x0e, 0x23, 0x52, 0x73, 0xf7, 0x08, 0x8e, 0x24, 0x2e, 0x00, 0x87, 0x0b, 0xb7, 0xcd, 0x9e, 0xee, 0x04, 0xf3, 0xe6, 0x24, 0xf4, 0xa6, 0x11, 0x9c, 0xce, 0xa4, 0x6d, 0x26, 0xe3, 0xcf, 0x2e, 0x14, 0x91, 0x54, 0x95, 0x78, 0x95, 0xd5, 0xe5, 0x70, 0x69, 0xfe, 0x73, 0x8b]);
}
#[test]
fn f512_pattern10() {
    let mut f = SHA3Hash512::new();
    f.put_message(TEST_PATTERN_10);
    assert_eq!(f.digest(), [0x98, 0x36, 0x7f, 0xe0, 0xeb, 0xce, 0xb0, 0xac, 0x89, 0x85, 0x1a, 0x2d, 0x6c, 0xe2, 0x1f, 0x2b, 0x12, 0xd2, 0x6b, 0x59, 0x86, 0x58, 0x7f, 0x63, 0xda, 0xe8, 0x03, 0x25, 0x4e, 0xf9, 0xce, 0x13, 0xc0, 0xde, 0x48, 0xde, 0x5b, 0xd1, 0x05, 0x1f, 0x0c, 0x4b, 0x66, 0x83, 0xe2, 0x4d, 0x2d, 0xc5, 0x54, 0x3c, 0x86, 0xd0, 0xb7, 0xe0, 0x11, 0x30, 0xcc, 0x9c, 0x16, 0x8e, 0xd8, 0x41, 0x57, 0xb1]);
}
#[test]
fn f512_pattern11() {
    let mut f = SHA3Hash512::new();
    f.put_message(TEST_PATTERN_11);
    assert_eq!(f.digest(), [0x82, 0xcd, 0x26, 0xe9, 0x49, 0x73, 0x16, 0x4b, 0xca, 0x14, 0x32, 0xb9, 0x12, 0x88, 0x34, 0x81, 0x45, 0xd4, 0x77, 0xdc, 0xeb, 0xac, 0x57, 0x43, 0xe7, 0x97, 0x77, 0x14, 0x7e, 0x16, 0xfe, 0xc5, 0x68, 0xe7, 0xad, 0x7b, 0x9d, 0xff, 0x31, 0x92, 0x70, 0xf3, 0xd6, 0x8d, 0x8b, 0x8b, 0xc3, 0x6f, 0xff, 0x82, 0x1d, 0x6e, 0x2b, 0x34, 0x42, 0x31, 0xaf, 0xef, 0x4a, 0xee, 0xc0, 0xff, 0x34, 0x77]);
}
